#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Dec 29 23:44:56 2020

@author: zhenyu
"""

import pandas as pd
import numpy as np
import glob
import os
import random
import pyarrow.parquet as pq
import time
from multiprocessing import Pool
from random import randint
import sys
os.environ['OMP_NUM_THREADS'] = '1'
os.environ['OMP_THREAD_LIMIT'] = '1'


def f1(x):
    random.seed(1)
    sl = [1600681, 2002117, 2300277, 2300087, 2002946, 1600312, 1603050, 1600598, 2000726, 2002932, 2000408, 2000596, 2002460, 1605336, 2300030, 1601211, 1600486, 2000686, 1600145, 2300469, 2300229, 1688055, 2000010, 2002278, 2002939, 2002961, 1600073, 2002646, 2000151, 1603123, 2002758, 2300085, 1601702, 2002208, 2300687, 1600525, 2300502, 1603609, 1600156, 1600063, 1600079, 2002452, 2001979, 1600025, 2300662, 2300418, 1605399, 2002607, 1601369, 2300795, 1688521, 2002777, 1600148, 2000928, 1601598, 2300912, 2000037, 2300869, 2000727, 2002048, 1601827, 1603825, 1601789, 2002567, 1601512, 2300907, 2000528, 2300718, 1603323, 2300608, 1600123, 1688369, 2300236, 2300565, 2002063, 2300590, 2002421, 1600515, 1600958, 2002368, 2002768, 2300328, 1603368, 1600612, 2002853, 1603712, 2300478, 2300884, 2300813, 2002713, 2000762, 2300651, 2300786, 2300863, 2000807, 2300204, 2300539, 2002540, 1600977, 1603486, 1603288, 2002193, 2300423, 2000755, 2300272, 2300669, 2000795, 1688088, 2002199, 2300301, 1600173, 2000636, 1601989, 2002857, 2300067, 1688196, 1688357, 2002516, 1600856, 1603987, 2002031, 2300424, 2002675, 2002999, 2002557, 2002831, 1605128, 1600436, 2000042, 2002512, 2000811, 1600555, 2003010, 1600812, 2000893, 2300246, 1688086, 1605006, 2000697, 2002808, 1600151, 2000581, 1600218, 1603535, 2002677, 2300280, 2002308, 2002216, 2002155, 1688089, 2002441, 1600843, 1600834, 2000778, 1601678, 1600104, 2002977, 1601038, 2000998, 2300581, 2300329, 2002029, 1601808, 1688198, 2000839, 1603815, 2300719, 2300915, 2002153, 1603888, 2000525, 2300537, 1603157, 2002493, 2002028, 2002284, 2002792, 1600017, 1688010, 2300008, 2300316, 2300164, 2300439, 2300659, 2002842, 2000833, 2300117, 1600653, 2000882, 2003006, 2002085, 1601138, 1688571, 1600279, 2000639, 2300371, 1603970, 2002120, 2002054, 1601058, 2300670, 2000791, 1688336, 2000671, 2300134, 1603909, 2300791, 1603828, 1600072, 2000989, 2001696, 2002343, 2300020, 2002298, 1603703, 2000520, 2002245, 1600141, 2300097, 1601727, 2002393, 1600873, 2002039, 2002180, 1600892, 2300332, 1600475, 2300071, 2002041, 2300065, 2300292, 2300147, 2300628, 1603053, 1600163, 2300253, 2002552, 1600350, 1600415, 2300363, 1600113, 2000426, 1600038, 2002901, 2002908, 1603258, 1603021, 1603155, 1600561, 2300066, 2002349, 1600929, 1603817, 1603328, 1600343, 1600828, 1600793, 2300665, 2000927, 1600831, 2002482, 1603183, 2002446, 2002714, 1603357, 2000502, 2002673, 1603639, 2000731, 2000603, 1600582, 1600128, 1603577, 1688023, 1603811, 1688516, 2300062, 1600968, 1603078, 1600558, 1603039, 2300495, 2002796, 2000820, 1601199, 2002270, 2000006, 2300149, 1600060, 1601636, 1600054, 1688123, 1600733, 1600179, 2002746, 1600796, 2000153, 2002683, 2000799, 2002572, 1688578, 2002014, 2300213, 1601568, 2002374, 2300068, 2002642, 2000863, 2000415, 1601608, 2000909, 2002447, 2300876, 1688098, 2002559, 2002145, 2300092, 1603636, 2002495, 2002375, 1688577, 1600291, 2002828, 1603387, 1600637, 1601231, 2300395, 1600235, 1603516, 1600351, 2300322, 1600378, 1603559, 1603383, 2300864, 1600787, 2300840, 2002099, 1603033, 1600660, 1600095, 2002082, 2300408, 2300289, 1600191, 2002206, 2300160, 1601390, 2300499, 2002121, 2000533, 1600848, 2300196, 2300360, 2300703, 2003017, 2002679, 2002341, 2000813, 1600189, 1605255, 1601068, 1603839, 1600510, 1601139, 2002134, 2002556, 2300482, 2000011, 2002209, 1600997, 2000711, 1600535, 2002521, 1688056, 1603366, 2000788, 2000757, 1600114, 1603667, 2002297, 2300379, 1688178, 2300616, 1603259, 1600116, 1600780, 1601077, 2300318, 1603683, 2300125, 2002093, 2300004, 1600684, 1603777, 1688599, 1601258, 1603126, 2300782, 1600498, 2300237, 1605333, 2002027, 2300737, 2300807, 2300492, 2002610, 2000967, 2000668, 2002965, 2000959, 1601866, 1600322, 2002775, 1600202, 1600422, 1600673, 1600839, 1600825, 2000988, 2300496, 1603136, 2002925, 1603709, 2002246, 2000798, 2300251, 2300640, 1603991, 1603776, 1603788, 1600581, 1603331, 1601872, 2300358, 2002263, 2003015, 2002730, 2300444, 2000691, 1600685, 2002162, 2300698, 2002975, 2300520, 1603630, 1600197, 1688222, 1600362, 1605366, 2300353, 2300027, 1600737, 2300198, 1600635, 1603797, 1600584, 2002309, 2300808, 2300001, 2300533, 2300563, 2002123, 2002037, 1601611, 2002104, 1600403, 1603127, 1603976, 1603363, 2002097, 2300485, 1600583, 2000519, 1603218, 1600552, 2300022, 1600228, 2300195, 1603365, 2300748, 2002303, 2002541, 2300656, 2300672, 2300696, 1600586, 2300188, 2300035, 1600200, 1600967, 1601929, 2300016, 2002190, 2300622, 1600804, 1600588, 2300587, 2300642, 2002583]
    pathLs = []
    for s in sl:
        pathLs.append('/mnt/e/md_trade/md_trade/20201211/' + str(s) +'.parquet')
    start_time = time.time()
    df = []
    for p in pathLs:
        data = pq.read_table(p, use_threads=False).to_pandas() 
        df += [data]
    time1 = time.time() - start_time
    start_time = time.time()
    df = pd.concat(df, ignore_index=True)
    time2 = time.time() - start_time
    print(str(time1) + ',' + str(time2))
    return time1, time2, 'case1', 'local load home', 72

def f2(x):
    random.seed(1)
    pathLs = list(np.array(glob.glob('/mnt/e/md_trade/md_trade/***/2000001.parquet')))
    pathLs = pathLs[-500:]
    start_time = time.time()
    df = []
    for p in pathLs:
        data = pq.read_table(p, use_threads=False).to_pandas() 
        df += [data]
    time1 = time.time() - start_time
    start_time = time.time()
    df = pd.concat(df, ignore_index=True)
    time2 = time.time() - start_time    
    print(str(time1) + ',' + str(time2))
    return time1, time2, 'case2', 'local load home', 72

def f3(x):
    pathLs = '/mnt/e/md_trade/md_trade/20201211/2000001.parquet'
    start_time = time.time()
    df = []
    data = pq.read_table(pathLs, use_threads=False).to_pandas() 
    df += [data]
    time1 = time.time() - start_time
    start_time = time.time()
    df = pd.concat(df, ignore_index=True)
    time2 = time.time() - start_time
    print(str(time1) + ',' + str(time2))
    return time1, time2, 'case3', 'local load home', 72

if __name__ == '__main__':
    n = [randint(0,72) for i in range(72)]
    with Pool(72) as p:
        re = p.map(f1, n)
    re = pd.DataFrame(re)
    re.columns = ['time1', 'time2', 'case', 'mode', 'core']
    re.to_csv('/mnt/e/md_trade/local_home/core_72/case1.csv')   
    
    with Pool(72) as p:
        re = p.map(f2, n)
    re = pd.DataFrame(re)
    re.columns = ['time1', 'time2', 'case', 'mode', 'core']
    re.to_csv('/mnt/e/md_trade/local_home/core_72/case2.csv')    

    with Pool(72) as p:
        re = p.map(f3, n)
    re = pd.DataFrame(re)
    re.columns = ['time1', 'time2', 'case', 'mode', 'core']
    re.to_csv('/mnt/e/md_trade/local_home/core_72/case3.csv')    
# t1 = []
# t2 = []
# case = []
# mode = []
# core = []
# for i in range(20):
#     re = f1(i)
#     t1.append(re[0])
#     t2.append(re[1])
#     case.append(re[2])
#     mode.append(re[3])
#     core.append(re[4])
        
# for i in range(20):
#     re = f2(i)
#     t1.append(re[0])
#     t2.append(re[1])
#     case.append(re[2])
#     mode.append(re[3])
#     core.append(re[4])
       
# for i in range(20):
#     re = f3(i)
#     t1.append(re[0])
#     t2.append(re[1])
#     case.append(re[2])
#     mode.append(re[3])
#     core.append(re[4])
    
# df = pd.DataFrame()
# df['time1'] = t1
# df['time2'] = t2
# df['case'] = case
# df['mode'] = mode
# df['core'] = core
# df.to_csv('/mnt/e/md_trade/local_home/core_1/' + '0' + '.csv')

# random.seed(1)
# pathLs = list(np.array(glob.glob('/data/home/zhenyu/mongoDB/md_trade/20201211/***')))
# pathLs = random.sample(pathLs, 500)
# print([int(os.path.basename(i).split('.')[0]) for i in pathLs])

# pathLs = list(np.array(glob.glob('/data/home/zhenyu/mongoDB/md_trade/***/2000001.parquet')))
# pathLs = pathLs[-500:]
# print(min([int(i.split('/')[6]) for i in pathLs]))
# print(max([int(i.split('/')[6]) for i in pathLs]))